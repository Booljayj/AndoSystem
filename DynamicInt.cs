// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using UnityEngine;

namespace AndoSystem {
	public class DynamicInt {
		//Base value of this int, before any modifiers are applied
		int _base;
		public int Base {
			get {return _base;}
			set {_base = value;}
		}

		//Value of this int after all modifiers are applied. Read-only
		public int Value {
			get {
				//create an integer message to send around to all the modifiers
				Message<int> message = new Message<int>(_base);
				
				for (int i = 0; i < Modifiers.Count; i++) {
					//invoke the modifier on the message, storing the output text
					Text[i] = Modifiers[i].Invoke(message);
				}
				
				//return the value after it has been processed by the modifiers
				return message.Value;
			}
		}

		List<Modifier> Modifiers = new List<Modifier>();
		List<string> Text = new List<string>();

		public void AddModifier(Modifier mod) {
			if (Modifiers.Contains(mod)) {
				Debug.LogError("Duplicate modifier entry detected "+mod.ToString());
			} else {
				Modifiers.Add(mod);
				Text.Add("new modifier"); //text here doesn't matter, just increase array size
			}
		}

		public void RemoveModifier(Modifier mod) {
			if (!Modifiers.Contains(mod)) {
				Debug.LogError("Attempted to remove modifier that doesn't exist "+mod.ToString());
			} else {
				Modifiers.Remove(mod);
				Text.RemoveAt(Text.Count - 1); //reduce array size by 1
			}
		}

		public string[] GetText() {
			return Text.ToArray();
		}
	}

	public interface Modifier {
		string Invoke(Message<int> message);
	}

	public class Message<T> {
		public T Value {get; set;}
		public T Start {get; private set;}

		public Message(T input) {
			Start = input;
			Value = input;
		}
	}
}