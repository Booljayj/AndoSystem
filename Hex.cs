// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;

namespace AndoSystem {
	[System.Serializable]
	public struct Hex {
		public int q, r;
		public float z;

		public int s {
			get {return -q-r;}
		}

		//constructors
		public Hex(int q, int r, int z) {
			this.q = q;
			this.r = r;
			this.z = z;
		}
		public Hex(int q, int r) {
			this.q = q;
			this.r = r;
			this.z = 0;
		}
		public Hex() {}

		//operators
		public static bool operator ==(Hex a, Hex b) {
			return a.q == b.q && a.r == b.r && a.z == b.z;
		}
		
		public static bool operator !=(Hex a, Hex b) {
			return !(a == b);
		}

		public static Hex operator +(Hex a, Hex b) {
			return Hex(a.q + b.q, a.r + b.r, a.z + b.z);
		}
		
		public static Hex operator -(Hex a, Hex b) {
			return Hex(a.q - b.q, a.r - b.r, a.z - b.z);
		}
		
		public static Hex operator *(Hex a, int k) {
			return Hex(a.q * k, a.r * k, a.z * k);
		}

		//methods

		/// <summary>
		/// Manhattan Distance between a and b
		/// </summary>
		public int Distance(Hex a, Hex b) {
			return ((abs(a.q - b.q) + abs(a.r - b.r) + abs(a.s - b.s)) / 2);
		}

		/// <summary>
		/// Linear interpolation between a and b
		/// </summary>
		public Hex Lerp(Hex a, Hex b, float t) {
			return Hex(a.q + (b.q - a.q) * t,
			           a.r + (b.r - a.r) * t,
			           a.z + (b.z - a.z) * t);
		}

		public Vector3 ToVector(Hex hex) {
			return new Vector3 (Mathf.Sqrt(3f) * ((float)hex.q + (float)hex.r/2f),
			                    3f/2f * (float)hex.r,
			                    hex.z);
		}

		public Hex FromVector(Vector3 vector) {
			return new Hex (vector.x * Mathf.Sqrt(3f)/3f - vector.y / 3f,
			                vector.y * 2f/3f,
			                vector.z);
		}
	}
}

